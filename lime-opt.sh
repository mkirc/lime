#!/bin/bash

# Created by argbash-init v2.10.0
# ARG_OPTIONAL_BOOLEAN([hdf5],[],[Compile with hdf5 support])
# ARG_OPTIONAL_BOOLEAN([fast],[f],[Use fast exponential mode])
# ARG_OPTIONAL_BOOLEAN([silent],[s],[Suppress all output except errors])
# ARG_OPTIONAL_BOOLEAN([debug],[d],[Compile with fixed seeds and debugging symbols])
# ARG_OPTIONAL_BOOLEAN([ncurses],[n],[Compile with ncurses support])
# ARG_OPTIONAL_BOOLEAN([compile-only],[c],[Only compile lime executable. Do not run it.])
# ARG_OPTIONAL_SINGLE([nthreads],[p],[Use N threads])
# ARG_POSITIONAL_SINGLE([model-file])
# ARG_DEFAULTS_POS([])
# ARG_HELP([<LIME - the versatile line modeling engine>])
# ARG_VERSION([print_version])
# DEFINE_SCRIPT_DIR([])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.10.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='fsdncphv'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
_arg_model_file=
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_hdf5="off"
_arg_fast="off"
_arg_silent="off"
_arg_debug="off"
_arg_ncurses="off"
_arg_compile_only="off"
_arg_nthreads=


# OTHER STUFF GENERATED BY Argbash
script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)" || { echo "Couldn't determine the script's running directory, which probably matters, bailing out" >&2; exit 2; }

print_help()
{
	printf '%s\n' 'Usage: lime [OPTIONS] <model-file>'
    printf '%s\n' 'Arguments: <model-file>: C model file'
    printf '%s\n' 'Options:'
	printf '\t%s\t\t%s\n' "-v, --version:" "Display version Information"
	printf '\t%s\t\t\t%s\n' "--hdf5:" "Compile with hdf5 support"
	printf '\t%s\t\t%s\n' "-f, --fast:" "Use fast exponential computation"
	printf '\t%s\t\t%s\n' "-s, --silent:" "Suppress output except errors"
	printf '\t%s\t\t%s\n' "-d, --debug:" "Compile with fixed seeds and debugging symbols"
    printf '\t%s\t\t%s\n' "-n, --ncurses:" "Compile with ncurses support (for interactive use)"
	printf '\t%s\t%s\n' "-c, --compile-only" "Only compile lime executable. Do not run it. (off by default)"
	printf '\t%s\t\t%s\n' "-p, --nthreads:" "Run in parallel with N threads (default: '1')"
	printf '\t%s\t\t%s\n\n' "-h, --help:" "Prints help"
    printf '%s\n' "See <http://lime.readthedocs.org> for more information."
    printf '%s\n' "Report bugs to <http://github.com/mkirc/lime/issues>."
}

print_version() {
    vernum=$(grep VERSION ${script_dir}/src/lime.h | awk '{print $3}' | sed s/\"//g)
    printf '%s\n' "This is LIME, The versatile line modeling engine, version $vernum"
    printf '%s\n' "Copyright (C) 2006-2014 Christian Brinch"
    printf '%s\n' "Copyright (C) 2015-2017 The LIME development team"
    printf '%s\n' "Copyright (C) 2023 mkirc"
}


parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			--no-hdf5|--hdf5)
				_arg_hdf5="on"
				test "${1:0:5}" = "--no-" && _arg_hdf5="off"
				;;
			-f|--no-fast|--fast)
				_arg_fast="on"
				test "${1:0:5}" = "--no-" && _arg_fast="off"
				;;
			-f*)
				_arg_fast="on"
				_next="${_key##-f}"
				if test -n "$_next" -a "$_next" != "$_key"
				then
					{ begins_with_short_option "$_next" && shift && set -- "-f" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
				fi
				;;
			-s|--no-silent|--silent)
				_arg_silent="on"
				test "${1:0:5}" = "--no-" && _arg_silent="off"
				;;
			-s*)
				_arg_silent="on"
				_next="${_key##-s}"
				if test -n "$_next" -a "$_next" != "$_key"
				then
					{ begins_with_short_option "$_next" && shift && set -- "-s" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
				fi
				;;
			-d|--no-debug|--debug)
				_arg_debug="on"
				test "${1:0:5}" = "--no-" && _arg_debug="off"
				;;
			-d*)
				_arg_debug="on"
				_next="${_key##-d}"
				if test -n "$_next" -a "$_next" != "$_key"
				then
					{ begins_with_short_option "$_next" && shift && set -- "-d" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
				fi
				;;
			-n|--no-ncurses|--ncurses)
				_arg_ncurses="on"
				test "${1:0:5}" = "--no-" && _arg_ncurses="off"
				;;
			-n*)
				_arg_ncurses="on"
				_next="${_key##-n}"
				if test -n "$_next" -a "$_next" != "$_key"
				then
					{ begins_with_short_option "$_next" && shift && set -- "-n" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
				fi
				;;
			-c|--no-compile-only|--compile-only)
				_arg_compile_only="on"
				test "${1:0:5}" = "--no-" && _arg_compile_only="off"
				;;
			-c*)
				_arg_compile_only="on"
				_next="${_key##-c}"
				if test -n "$_next" -a "$_next" != "$_key"
				then
					{ begins_with_short_option "$_next" && shift && set -- "-c" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
				fi
				;;
			-p|--nthreads)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_nthreads="$2"
				shift
				;;
			--nthreads=*)
				_arg_nthreads="${_key##--nthreads=}"
				;;
			-p*)
				_arg_nthreads="${_key##-p}"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			-v|--version)
				print_version
				exit 0
				;;
			-v*)
				print_version
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="'model-file'"
	test "${_positionals_count}" -ge 1 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 1 (namely: $_required_args_string), but got only ${_positionals_count}." 1
	test "${_positionals_count}" -le 1 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 1 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
	local _positional_name _shift_for=$1
	_positional_names="_arg_model_file "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash
script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)" || { echo "Couldn't determine the script's running directory, which probably matters, bailing out" >&2; exit 2; }

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


# vvv  PLACE YOUR CODE HERE  vvv
# For example:
# printf 'Value of --%s: %s\n' 'version' "$_arg_version"
# printf 'Value of --%s: %s\n' 'hdf5' "$_arg_hdf5"
# printf 'Value of --%s: %s\n' 'fast' "$_arg_fast"
# printf 'Value of --%s: %s\n' 'silent' "$_arg_silent"
# printf 'Value of --%s: %s\n' 'debug' "$_arg_debug"
# printf 'Value of --%s: %s\n' 'ncurses' "$_arg_ncurses"
# printf 'Value of --%s: %s\n' 'nthreads' "$_arg_nthreads"
# printf "Value of '%s': %s\\n" 'model-file' "$_arg_model_file"

# ^^^  TERMINATE YOUR CODE BEFORE THE BOTTOM ARGBASH MARKER  ^^^

# ] <-- needed because of Argbash
